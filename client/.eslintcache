[{"C:\\Users\\onefo\\UT_AustinBootCamp\\Module_21_Challenge\\client\\src\\index.js":"1","C:\\Users\\onefo\\UT_AustinBootCamp\\Module_21_Challenge\\client\\src\\App.js":"2","C:\\Users\\onefo\\UT_AustinBootCamp\\Module_21_Challenge\\client\\src\\pages\\SavedBooks.js":"3","C:\\Users\\onefo\\UT_AustinBootCamp\\Module_21_Challenge\\client\\src\\pages\\SearchBooks.js":"4","C:\\Users\\onefo\\UT_AustinBootCamp\\Module_21_Challenge\\client\\src\\components\\Navbar.js":"5","C:\\Users\\onefo\\UT_AustinBootCamp\\Module_21_Challenge\\client\\src\\components\\LoginForm.js":"6","C:\\Users\\onefo\\UT_AustinBootCamp\\Module_21_Challenge\\client\\src\\components\\SignupForm.js":"7","C:\\Users\\onefo\\UT_AustinBootCamp\\Module_21_Challenge\\client\\src\\utils\\auth.js":"8","C:\\Users\\onefo\\UT_AustinBootCamp\\Module_21_Challenge\\client\\src\\utils\\mutations.js":"9","C:\\Users\\onefo\\UT_AustinBootCamp\\Module_21_Challenge\\client\\src\\utils\\localStorage.js":"10","C:\\Users\\onefo\\UT_AustinBootCamp\\Module_21_Challenge\\client\\src\\utils\\queries.js":"11"},{"size":266,"mtime":1668792144287,"results":"12","hashOfConfig":"13"},{"size":1539,"mtime":1668972222545,"results":"14","hashOfConfig":"13"},{"size":2238,"mtime":1668978460148,"results":"15","hashOfConfig":"13"},{"size":4590,"mtime":1668981507901,"results":"16","hashOfConfig":"13"},{"size":2524,"mtime":1668792144286,"results":"17","hashOfConfig":"13"},{"size":2630,"mtime":1668979875543,"results":"18","hashOfConfig":"13"},{"size":3371,"mtime":1668979775963,"results":"19","hashOfConfig":"13"},{"size":1233,"mtime":1668981251523,"results":"20","hashOfConfig":"13"},{"size":179,"mtime":1668979998104,"results":"21","hashOfConfig":"13"},{"size":793,"mtime":1668792144290,"results":"22","hashOfConfig":"13"},{"size":282,"mtime":1668981703376,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1eb50xu",{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\onefo\\UT_AustinBootCamp\\Module_21_Challenge\\client\\src\\index.js",[],["50","51"],"C:\\Users\\onefo\\UT_AustinBootCamp\\Module_21_Challenge\\client\\src\\App.js",[],"C:\\Users\\onefo\\UT_AustinBootCamp\\Module_21_Challenge\\client\\src\\pages\\SavedBooks.js",["52","53"],"import React from 'react';\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\nimport Auth from '../utils/auth';\nimport { removeBookId } from '../utils/localStorage';\nimport { useQuery, useMutation } from '@apollo/client';\nimport { GET_ME } from '../utils/queries';\nimport { REMOVE_BOOK } from '../utils/mutations';\n\nconst SavedBooks = () => {\n\n  const { loading, data } = useQuery(GET_ME);\n  const [removeBook, { error }] = useMutation(REMOVE_BOOK);\n  const userData = data?.me || {};\n\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\n  const handleDeleteBook = async (bookId) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const { data } = await removeBook({\n        variables: { bookId },\n      });\n\n      removeBookId(bookId);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  if (loading) {\n    return <h2>LOADING...</h2>;\n  }\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Viewing saved books!</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {userData.savedBooks.length\n            ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? 'book' : 'books'}:`\n            : 'You have no saved books!'}\n        </h2>\n        <CardColumns>\n          {userData.savedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' /> : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  <Button className='btn-block btn-danger' onClick={() => handleDeleteBook(book.bookId)}>\n                    Delete this Book!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedBooks;\n","C:\\Users\\onefo\\UT_AustinBootCamp\\Module_21_Challenge\\client\\src\\pages\\SearchBooks.js",["54","55"],"import React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, Col, Form, Button, Card, CardColumns } from 'react-bootstrap';\nimport Auth from '../utils/auth';\nimport { saveBookIds, getSavedBookIds } from '../utils/localStorage';\nimport { useMutation } from '@apollo/client';\nimport { SAVE_BOOK } from '../utils/mutations';\n\nconst SearchBooks = () => {\n  // create state for holding returned google api data\n  const [searchedBooks, setSearchedBooks] = useState([]);\n  // create state for holding our search field data\n  const [searchInput, setSearchInput] = useState('');\n\n  // create state to hold saved bookId values\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\n\n  const [saveBook, { error }] = useMutation(SAVE_BOOK);\n\n  useEffect(() => {\n    return () => saveBookIds(savedBookIds);\n  });\n\n  // create method to search for books and set state on form submit\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await fetch(\n        `https://www.googleapis.com/books/v1/volumes?q=${searchInput}`\n      );\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      const { items } = await response.json();\n\n      const bookData = items.map((book) => ({\n        bookId: book.id,\n        authors: book.volumeInfo.authors || ['No author to display'],\n        title: book.volumeInfo.title,\n        description: book.volumeInfo.description,\n        image: book.volumeInfo.imageLinks?.thumbnail || '',\n      }));\n\n      setSearchedBooks(bookData);\n      setSearchInput('');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // create function to handle saving a book to our database\n  const handleSaveBook = async (bookId) => {\n    // find the book in `searchedBooks` state by the matching id\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\n\n    // get token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const { data } = await saveBook({\n        variables: { newBook: { ...bookToSave } },\n      });\n\n      // if book successfully saves to user's account, save book id to state\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Search for Books!</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Form.Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name='searchInput'\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  type='text'\n                  size='lg'\n                  placeholder='Search for a book'\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button type='submit' variant='success' size='lg'>\n                  Submit Search\n                </Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Container>\n      </Jumbotron>\n\n      <Container>\n        <h2>\n          {searchedBooks.length\n            ? `Viewing ${searchedBooks.length} results:`\n            : 'Search for a book to begin'}\n        </h2>\n        <CardColumns>\n          {searchedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? (\n                  <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  {Auth.loggedIn() && (\n                    <Button\n                      disabled={savedBookIds?.some((savedBookId) => savedBookId === book.bookId)}\n                      className='btn-block btn-info'\n                      onClick={() => handleSaveBook(book.bookId)}>\n                      {savedBookIds?.some((savedBookId) => savedBookId === book.bookId)\n                        ? 'This book has already been saved!'\n                        : 'Save this Book!'}\n                    </Button>\n                  )}\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SearchBooks;\n","C:\\Users\\onefo\\UT_AustinBootCamp\\Module_21_Challenge\\client\\src\\components\\Navbar.js",[],"C:\\Users\\onefo\\UT_AustinBootCamp\\Module_21_Challenge\\client\\src\\components\\LoginForm.js",[],"C:\\Users\\onefo\\UT_AustinBootCamp\\Module_21_Challenge\\client\\src\\components\\SignupForm.js",["56"],"import React, { useState, useEffect } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { useMutation } from '@apollo/client';\nimport { ADD_USER } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nconst SignupForm = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n  const [addUser, { error, data }] = useMutation(ADD_USER);\n\n  useEffect(() => {\n    if (error) {\n      setShowAlert(true);\n    } else {\n      setShowAlert(false);\n    }\n  }, [error]);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await addUser({\n        variables: { ...userFormData },\n      });\n\n      Auth.login(data.addUser.token);\n    } catch (err) {\n      console.error(err);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group>\n          <Form.Label htmlFor='username'>Username</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your username'\n            name='username'\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='email'\n            placeholder='Your email address'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.username && userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default SignupForm;\n","C:\\Users\\onefo\\UT_AustinBootCamp\\Module_21_Challenge\\client\\src\\utils\\auth.js",[],"C:\\Users\\onefo\\UT_AustinBootCamp\\Module_21_Challenge\\client\\src\\utils\\mutations.js",[],"C:\\Users\\onefo\\UT_AustinBootCamp\\Module_21_Challenge\\client\\src\\utils\\localStorage.js",[],"C:\\Users\\onefo\\UT_AustinBootCamp\\Module_21_Challenge\\client\\src\\utils\\queries.js",[],{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":12,"column":24,"nodeType":"63","messageId":"64","endLine":12,"endColumn":29},{"ruleId":"61","severity":1,"message":"65","line":24,"column":15,"nodeType":"63","messageId":"64","endLine":24,"endColumn":19},{"ruleId":"61","severity":1,"message":"62","line":17,"column":22,"nodeType":"63","messageId":"64","endLine":17,"endColumn":27},{"ruleId":"61","severity":1,"message":"65","line":70,"column":15,"nodeType":"63","messageId":"64","endLine":70,"endColumn":19},{"ruleId":"61","severity":1,"message":"65","line":14,"column":28,"nodeType":"63","messageId":"64","endLine":14,"endColumn":32},"no-native-reassign",["66"],"no-negated-in-lhs",["67"],"no-unused-vars","'error' is assigned a value but never used.","Identifier","unusedVar","'data' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]